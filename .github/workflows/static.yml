# Optimized workflow for deploying static content to GitHub Pages with Next.js integration
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x # Replace with your desired Node.js version

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      # Step 4: Build the project (Next.js static export)
      - name: Build project
        run: npm run build

      # Step 5: Verify static output
      - name: Verify static files
        run: |
          if [ ! -d "out" ]; then
            echo "Error: Static export directory 'out' not found!"
            exit 1
          fi
          if [ $(find out/magic/ -name "index.html" | wc -l) -lt 5 ]; then
            echo "Error: Missing static pages in 'out/magic/'!"
            exit 1
          fi

      # Step 6: Upload artifact
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './out' # Only upload the static export directory

      # Step 7: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
